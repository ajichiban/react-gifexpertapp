{"version":3,"sources":["componets/AddAnime.js","helpers/helpers.js","componets/GifGridItem.js","componets/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddAnime","setAnimes","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","oldValue","onChange","target","value","type","getGifs","category","a","url","fetch","res","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","useEffect","then","setState","loading","state","useFetchGifs","image","key","GifExpertApp","props","animes","anime","ReactDOM","render","document","getElementById"],"mappings":"0MAIaA,EAAW,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAevC,OACE,sBAAMC,SAVa,SAACC,GAGpB,GAFAA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,EAAG,OAAO,EAExCR,GAAU,SAACS,GAAD,OAAeP,GAAf,mBAA6BO,OACvCN,EAAc,KAId,SACE,uBACEO,SAda,SAACL,GAAD,OAAOF,EAAcE,EAAEM,OAAOC,QAe3CA,MAAOV,EACPW,KAAK,Y,8BCpBPC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAERC,EAFQ,gDAEuCF,EAFvC,gEAIIG,MAAMD,GAJV,cAIRE,EAJQ,gBAKOA,EAAIC,OALX,uBAKPC,EALO,EAKPA,KAEDC,EAAOD,EAAKE,KAAI,YACpB,MAAO,CACLC,GAF2C,EAAvBA,GAGpBC,MAH2C,EAAnBA,MAIxBR,IAJ2C,EAAZS,OAIlBC,iBAAiBV,QAXpB,kBAePK,GAfO,4CAAH,sDCFAM,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOR,EAAU,EAAVA,IAEvC,OACE,sBAAKY,UAAU,yCAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,qBAAKA,UAAU,cAAcC,IAAKb,EAAKc,IAAKN,MAE9C,oBAAGI,UAAU,cAAb,UAA4BJ,EAA5B,WCHOO,EAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAE3BkB,qBAAU,WAERnB,EAAQC,GAAUmB,MAAK,SAACR,GACtBS,EAAS,CACPd,KAAMK,EACNU,SAAS,SAIZ,CAACrB,IAXoC,MAadd,mBAAS,CACjCoB,KAAM,GACNe,SAAS,IAf6B,mBAajCC,EAbiC,KAa1BF,EAb0B,KAkBxC,OAAOE,EDf2BC,CAAavB,GAAjCW,EAFyB,EAE/BL,KAAce,EAFiB,EAEjBA,QAEtB,OACE,gCACE,+BAAKrB,EAAL,OAEEqB,EACI,aAGF,qBAAKP,UAAU,YAAf,SAEIH,EAAOH,KAAI,SAACgB,GAAD,OACT,wBAAC,EAAD,2BACMA,GADN,IAEEC,IAAKD,EAAMf,eEMdiB,EAzBM,SAAAC,GAAU,IAAD,EAEAzC,mBAAS,CAAC,WAFV,mBAErB0C,EAFqB,KAEb3C,EAFa,KAI5B,OACE,qCACE,8CACA,cAAC,EAAD,CAAUA,UAAWA,IACrB,uBAEA,oBAAI6B,UAAU,YAAd,SACIc,EAAOpB,KAAI,SAACqB,GAAD,OACT,cAAC,EAAD,CAAqB7B,SAAU6B,GAAjBA,Y,MCT1BC,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.84278c67.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport PropTypes from 'prop-types'\n\nexport const AddAnime = ({setAnimes}) => {\n\n  const [inputValue, setInputValue] = useState('')\n\n  const handleText = (e) => setInputValue(e.target.value)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if(inputValue.trim().length < 3) return false\n\n    setAnimes((oldValue) => [inputValue,...oldValue] )\n    setInputValue('')\n  } \n\n  return (\n    <form onSubmit={handleSubmit}  >\n      <input\n        onChange={handleText}\n        value={inputValue}\n        type=\"text\" \n       />\n    </form>\n  )\n}\n\nAddAnime.propTypes ={\n  setAnimes : PropTypes.func.isRequired  ,\n}\n","\n\n\n\nconst getGifs = async (category) =>  {\n\n  const url = `http://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=VmOSDo6A825Gt7StxJbB6xtPnaqndIOn `\n\n  const res = await fetch(url)\n  const {data} = await res.json()\n\n  const gifs = data.map(({id, title, images}) => {\n    return {\n      id,\n      title,\n      url : images.downsized_medium.url\n    }\n  })\n\n  return gifs\n\n}\n\nexport  {\n  getGifs\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <div className=\"card__image-container\">\n        <img className=\"card__image\" src={url} alt={title} />\n      </div>\n      <p className=\"card__title\">{title} </p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nimport { GifGridItem } from './GifGridItem'\n\n\nexport const GifGrid = ({ category }) => {\n\n  const { data: images, loading } = useFetchGifs(category)\n\n  return (\n    <div>\n      <h2>{category} </h2>\n      {\n        loading\n          ? \"Loading...\"\n\n          :\n          <div className=\"card-grid\">\n            {\n              images.map((image) => (\n                <GifGridItem\n                  {...image}\n                  key={image.id} />\n              ))\n            }\n          </div>\n\n      }\n\n\n    </div>\n  )\n}\n","import { useState , useEffect} from \"react\"\n\nimport { getGifs } from '../helpers/helpers';\n\n\nexport const useFetchGifs = (category) => {\n\n  useEffect(() => {\n\n    getGifs(category).then((images) => {\n      setState({\n        data: images,\n        loading: false\n      })\n    })\n\n  }, [category])\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  return state\n\n}\n","import React, { useState } from 'react'\nimport { AddAnime } from './componets/AddAnime'\nimport { GifGrid } from './componets/GifGrid'\n\nconst GifExpertApp = props => {\n\n  const [animes, setAnimes] = useState(['naruto'])\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddAnime setAnimes={setAnimes} />\n      <hr />\n\n      <ol className=\"card-grid\">\n        { animes.map((anime) => \n          ( <GifGrid key={anime} category={anime} />  )\n         ) }\n      </ol>\n    </>\n\n    \n  )\n}\n\n/* GifExpertApp.propTypes = {\n\n} */\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n\n  <GifExpertApp />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}